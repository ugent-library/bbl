
{
// See https://prasanthmj.github.io/go/peg-parser-in-go/

package queryparser

type Query struct { 
  AndQuery *AndQuery
  OrQueries []*AndQuery
}

type AndQuery struct { 
  FieldOrQueries []*FieldOrQuery
}

type FieldOrQuery struct { 
  Field *Field
  Query *Query
}

type Field struct {
	Key   *Source
	Value any // String / Int /Float /Measure
  Op    string
}

type Source struct {
	Name string
	Path []string
}

type Measure struct {
	Number any //int64/float64
	Units  string
}

func stringFromChars(chars any) string {
	str := ""
	r := chars.([]any)
	for _, i := range r {
		j := i.([]uint8)
		str += string(j[0])
	}
	return str
}

func makeSource(name interface{}, path interface{}) (*Source, error) {
	ps := path.([]interface{})

	paths := make([]string, 0)
	for _, p := range ps {
		pa := p.([]interface{})
		px := pa[1:]
		for _, pi := range px {
			paths = append(paths, pi.(string))
		}
	}

	return &Source{Name: name.(string), Path: paths}, nil
}

func makeValue(val any) (any, error) {
	return val, nil
}

func makeMeasure(num any, units any) (*Measure, error) {
	retVal := &Measure{Number: num, Units: units.(string)}

	return retVal, nil
}

func makeQuery(andQuery any, orQueries any) (*Query, error) {
  q := &Query{
    AndQuery: andQuery.(*AndQuery),
  }
  for _, a := range orQueries.([]any) {
    q.OrQueries = append(q.OrQueries, a.(*AndQuery))
  }
	return q, nil
}

func makeAndQuery(fieldOrQuery any, fieldOrQueries any) (*AndQuery, error) {
  q := &AndQuery{
    FieldOrQueries: []*FieldOrQuery{fieldOrQuery.(*FieldOrQuery)},
  }
  for _, a := range fieldOrQueries.([]any) {
    q.FieldOrQueries = append(q.FieldOrQueries, a.(*FieldOrQuery))
  }
	return q, nil
}

func makeFQFromQuery(q any) (*FieldOrQuery, error) {
  return &FieldOrQuery{Query: q.(*Query)}, nil
} 

func makeFQFromField(f any) (*FieldOrQuery, error) {
  return &FieldOrQuery{Field: f.(*Field)}, nil
} 

}

Query
  = aq:AndQuery _ oq:OrQuery* _ {
    return makeQuery(aq,oq)
  }

OrQuery 
  = _ '|' _ aq:AndQuery _ {
    return aq, nil
  }

AndQuery
  = _ fq:FieldOrQuery _  fqs:FieldOrQuery* _ {
    return makeAndQuery(fq, fqs)
  }
  
FieldOrQuery
   = _ '(' _ q:Query _ ')'_ {
        return makeFQFromQuery(q)
      }
   / _ f:Field _ {
        return makeFQFromField(f)
     }

Field
  = src:Source _ op:Operator _ value:Value {
      return &Field{Key:src.(*Source),Op:op.(string), Value:value}, nil
  }

Source
  = name:Identifier path:("." Identifier)* {
      return makeSource(name,path)
  }

Operator
  = op:(
     "<="
    / ">="
    / "="
    / "<"
    / ">"
  ){
    return string(c.text), nil
  }
  
Value
  = val:(
      Measure
    / Float
    / Integer
    / Identifier
    / String 
    ){
    return makeValue(val)
  }

Integer
  = [+-]? [0-9]+ {
    return strconv.ParseInt(string(c.text), 10, 64)
  }

Measure
  = number:(Integer / Float) unit:Identifier {
    return makeMeasure(number, unit)
  }

Float
  = [+-]? ([0-9]* "." [0-9]+ ) {
      return strconv.ParseFloat(string(c.text), 64)
    }

Identifier
  = [a-zA-Z0-9_]+ { 
      return string(c.text), nil
}

String
  = '"' chars:[^"]* '"' {
    return stringFromChars(chars), nil
  } 

_
  = [ \t]* { 
    return "", nil
}

EOF 
  = !.
