package works

import (
	"fmt"
	"github.com/ugent-library/bbl"
	"github.com/ugent-library/bbl/app/urls"
	"github.com/ugent-library/bbl/app/views"
	"github.com/ugent-library/bbl/app/views/backoffice"
	"github.com/ugent-library/bbl/app/views/forms"
	"slices"
)

templ Edit(c views.Ctx, rec *bbl.Work, state string) {
	@backoffice.Page(c, "Edit") {
		<div class="w-100 h-100 d-flex flex-column overflow-hidden">
			<div class="bc-navbar bc-navbar--white bc-navbar--auto bc-navbar--bordered-bottom flex-column align-items-start">
				<div class="bc-toolbar bc-toolbar-sm-responsive w-100">
					<div class="bc-toolbar-left mb-1">
						<div class="d-inline-flex align-items-center flex-wrap">
							<span>
								// @SummaryStatus(c, rec)
							</span>
							<span class="c-subline text-nowrap me-3 pe-3 border-end">
								// @SummaryKind(c, rec)
							</span>
						</div>
					</div>
					<div class="bc-toolbar-right mb-3 mb-lg-0">
						<div class="bc-toolbar-item ps-0 ps-lg-4">
							@FormButtons(c, rec)
						</div>
					</div>
				</div>
				<h4 class="w-100 c-body-small mb-4" id="work-summary-cite">
					@SummaryCite(c, rec)
				</h4>
				<div class="bc-toolbar flex-column flex-md-row align-items-start pb-4 h-auto">
					<div class="bc-toolbar-left mt-3 mt-md-0" id="work-summary-id">
						@SummaryID(c, rec)
					</div>
				</div>
			</div>
			<div class="d-flex flex-grow-1 flex-shrink-1 overflow-hidden position-relative">
				<div class="c-sub-sidebar c-sub-sidebar--responsive h-100 u-z-reset d-none d-lg-block">
					<div class="bc-navbar bc-navbar--large">
						<div class="bc-toolbar">
							<div class="bc-toolbar-left">
								<div class="bc-toolbar-item">
									<h4 class="bc-toolbar-title">Sidebar</h4>
								</div>
							</div>
						</div>
					</div>
					<div class="c-sub-sidebar__content pt-5">
						<div class="ps-6">
							@FormNav(c, rec)
						</div>
					</div>
				</div>
				<div class="w-100 u-scroll-wrapper">
					<div class="u-scroll-wrapper__body u-smooth-scroll p-6" data-bs-spy="scroll" data-bs-target="#work-form-nav" data-bs-offset="160" data-scroll-area>
						@Form(c, rec, state)
					</div>
				</div>
				if rec.ID != "" {
					<div id="work-messages"></div>
					<div id="work-changes"></div>
					<div id="work-info"></div>
					<div class="c-sub-sidebar c-sub-sidebar--small bg-light">
						<div class="c-sub-sidebar__content">
							<div class="d-flex justify-content-center py-3">
								<nav class="nav nav-sidebar flex-column">
									<button class="nav-link my-2" type="button">
										<i class="if if-message"></i>
									</button>
									<button
										class="nav-link my-2"
										type="button"
										hx-get={ urls.BackofficeWorkChanges(rec.ID) }
										hx-trigger="click once"
										hx-target="#work-changes"
									>
										<i class="if if-time"></i>
									</button>
									<button class="nav-link my-2" type="button">
										<i class="if if-info-circle"></i>
									</button>
								</nav>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	}
}

templ RefreshForm(c views.Ctx, rec *bbl.Work, state string) {
	<div hx-swap-oob="innerHTML:#work-summary-cite">
		@SummaryCite(c, rec)
	</div>
	<div hx-swap-oob="innerHTML:#work-summary-id">
		@SummaryID(c, rec)
	</div>
	<div hx-swap-oob="outerHTML:#work-form-buttons">
		@FormButtons(c, rec)
	</div>
	<div hx-swap-oob="outerHTML:#work-form-nav">
		@FormNav(c, rec)
	</div>
	@Form(c, rec, state)
}

templ FormButtons(c views.Ctx, rec *bbl.Work) {
	<div class="c-button-toolbar" id="work-form-buttons">
		<button
			class="btn btn-outline-secondary"
			if rec.ID == "" {
				hx-post={ urls.BackofficeWorks("", nil) }
			} else {
				hx-post={ urls.BackofficeWork(rec.ID) }
			}
			hx-include="#work-form [name*='work.']"
			hx-target="#work-form"
		>Save</button>
		<a class="btn btn-success" href="#">Publish to Biblio</a>
		<div class="dropdown">
			<button class="btn btn-outline-secondary btn-icon-only me-0" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				<i class="if if-more"></i>
				<div class="visually-hidden">More options</div>
			</button>
			<div class="dropdown-menu" style="">
				<button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#delete">
					<i class="if if-delete"></i>
					<span>Delete</span>
				</button>
			</div>
		</div>
	</div>
}

templ FormNav(c views.Ctx, rec *bbl.Work) {
	<nav class="nav nav-pills flex-column" id="work-form-nav">
		<a class="nav-link" href="#work-type">
			<span class="c-sidebar__label">Type</span>
		</a>
		<a class="nav-link" href="#work-files-info">
			<span class="c-sidebar__label">Full text &amp; info</span>
		</a>
		<a class="nav-link" href="#work-description">
			<span class="c-sidebar__label">Description</span>
		</a>
		<a class="nav-link" href="#work-contributors-affiliations">
			<span class="c-sidebar__label">People & affiliations</span>
		</a>
		<a class="nav-link" href="#work-bibliographic-information">
			<span class="c-sidebar__label">Bibliographic information</span>
		</a>
		<a class="nav-link" href="#work-conference-details">
			<span class="c-sidebar__label">Conference details</span>
		</a>
		<a class="nav-link" href="#work-identifiers">
			<span class="c-sidebar__label">Identifiers</span>
		</a>
	</nav>
}

templ Form(c views.Ctx, rec *bbl.Work, state string) {
	<div
		id="work-form"
		hx-include="#work-form [name*='work.']"
		hx-target="#work-form"
		hx-swap="outerHTML"
	>
		// hx-trigger="refresh-work-form from:body"
		<input type="hidden" name="work.state" value={ state }/>
		<div class="mb-6" id="work-type">
			<div class="mb-4">
				<h2>Type</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					<div class="row">
						<div class="col-lg-6">
							<div class="form-group mb-6 mb-lg-0">
								<label class="form-label form-label-top">Publication type</label>
								<select
									class="form-select w-100"
									name="kind"
									hx-post={ urls.BackofficeWorkChangeKind() }
								>
									for _, kind := range bbl.WorkKinds {
										<option value={ kind } selected?={ kind == rec.Kind }>{ kind }</option>
									}
								</select>
							</div>
						</div>
						if subKinds, ok := bbl.WorkSubkinds[rec.Kind]; ok {
							<div class="col-lg-6">
								<div class="form-group">
									<label class="form-label form-label-top">{ rec.Kind } type</label>
									<select
										class="form-select w-100"
										name="subkind"
										hx-post={ urls.BackofficeWorkChangeKind() }
									>
										<option></option>
										for _, kind := range subKinds {
											<option value={ kind } selected?={ kind == rec.Subkind }>{ kind }</option>
										}
									</select>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-files-info">
			<div class="mb-4">
				<h2>Full text &amp; info</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					@filesField(c, rec)
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-description">
			<div class="mb-4">
				<h2>Description</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					if rec.Profile.Titles != nil {
						@forms.TextRepeat(forms.TextRepeatArgs{
							FieldArgs: forms.FieldArgs{
								Name:     "work.titles",
								Label:    "Title",
								Required: rec.Profile.Titles.Required,
							},
							Attrs:     rec.Titles,
							AddURL:    urls.BackofficeWorkAddTitle(),
							RemoveURL: urls.BackofficeWorkRemoveTitle(),
						})
					}
					if rec.Profile.Abstracts != nil {
						@textsField(c, textsFieldArgs{
							Texts:       rec.Abstracts,
							Name:        "abstracts",
							Label:       c.Loc.Get("abstract"),
							PluralLabel: c.Loc.Get("abstracts"),
							Title:       c.Loc.Get("Abstract"),
							PluralTitle: c.Loc.Get("Abstracts"),
							AddURL:      urls.BackofficeWorkAddAbstract(),
							EditURL:     urls.BackofficeWorkEditAbstract(),
							RemoveURL:   urls.BackofficeWorkRemoveAbstract(),
						})
					}
					if rec.Profile.LaySummaries != nil {
						@textsField(c, textsFieldArgs{
							Texts:       rec.LaySummaries,
							Name:        "lay_summaries",
							Label:       c.Loc.Get("lay summary"),
							PluralLabel: c.Loc.Get("lay summaries"),
							Title:       c.Loc.Get("Lay summary"),
							PluralTitle: c.Loc.Get("Lay summaries"),
							AddURL:      urls.BackofficeWorkAddLaySummary(),
							EditURL:     urls.BackofficeWorkEditLaySummary(),
							RemoveURL:   urls.BackofficeWorkRemoveLaySummary(),
						})
					}
					if rec.Profile.Keywords != nil {
						@forms.Tags(forms.TagsArgs{
							FieldArgs: forms.FieldArgs{
								Name:  "work.keywords",
								Label: "Keywords",
							},
							Values: rec.Keywords,
						})
					}
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-contributors-affiliations">
			<div class="mb-4">
				<h2>People & affiliations</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					if rec.Profile.Contributors != nil {
						@contributorsField(c, rec)
					}
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-bibliographic-information">
			<div class="mb-4">
				<h2>Bibliographic information</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					if rec.Profile.PublicationYear != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Publication year",
								Name:     "work.publication_year",
								Required: rec.Profile.PublicationYear.Required,
								Cols:     1,
							},
							Value: rec.PublicationYear,
						})
					}
					if rec.Profile.Publisher != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Publisher",
								Name:     "work.publisher",
								Required: rec.Profile.Publisher.Required,
							},
							Value: rec.Publisher,
						})
					}
					if rec.Profile.PlaceOfPublication != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Place of publication",
								Name:     "work.place_of_publication",
								Required: rec.Profile.PlaceOfPublication.Required,
							},
							Value: rec.PlaceOfPublication,
						})
					}
					if rec.Profile.JournalTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Journal title",
								Name:     "work.journal_title",
								Required: rec.Profile.JournalTitle.Required,
							},
							Value: rec.JournalTitle,
						})
					}
					if rec.Profile.JournalAbbreviation != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Short journal title",
								Name:     "work.journal_abbreviation",
								Required: rec.Profile.JournalAbbreviation.Required,
							},
							Value: rec.JournalAbbreviation,
						})
					}
					if rec.Profile.BookTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Book title",
								Name:     "work.book_title",
								Required: rec.Profile.BookTitle.Required,
							},
							Value: rec.BookTitle,
						})
					}
					if rec.Profile.SeriesTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Series title",
								Name:     "work.series_title",
								Required: rec.Profile.SeriesTitle.Required,
							},
							Value: rec.SeriesTitle,
						})
					}
					if rec.Profile.Volume != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Volume",
								Name:     "work.volume",
								Required: rec.Profile.Volume.Required,
								Cols:     1,
							},
							Value: rec.Volume,
						})
					}
					if rec.Profile.Issue != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Issue",
								Name:     "work.issue",
								Required: rec.Profile.Issue.Required,
								Cols:     1,
							},
							Value: rec.Issue,
						})
					}
					if rec.Profile.IssueTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Special issue title",
								Name:     "work.issue_title",
								Required: rec.Profile.IssueTitle.Required,
							},
							Value: rec.IssueTitle,
						})
					}
					if rec.Profile.Edition != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Edition",
								Name:     "work.edition",
								Required: rec.Profile.Edition.Required,
								Cols:     1,
							},
							Value: rec.Edition,
						})
					}
					if rec.Profile.Pages != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "First page",
								Name:     "work.pages.start",
								Required: rec.Profile.Pages.Required,
								Cols:     1,
							},
							Value: rec.Pages.Start,
						})
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Last page",
								Name:     "work.pages.end",
								Required: rec.Profile.Pages.Required,
								Cols:     1,
							},
							Value: rec.Pages.End,
						})
					}
					if rec.Profile.TotalPages != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Number of pages",
								Name:     "work.total_pages",
								Required: rec.Profile.TotalPages.Required,
								Cols:     1,
							},
							Value: rec.TotalPages,
						})
					}
					if rec.Profile.ArticleNumber != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Article number",
								Name:     "work.article_number",
								Required: rec.Profile.ArticleNumber.Required,
								Cols:     1,
							},
							Value: rec.ArticleNumber,
						})
					}
					if rec.Profile.ReportNumber != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Report number",
								Name:     "work.report_number",
								Required: rec.Profile.ReportNumber.Required,
								Cols:     1,
							},
							Value: rec.ReportNumber,
						})
					}
				</div>
			</div>
		</div>
		if rec.Profile.Conference != nil {
			<div class="mb-6" id="work-conference-details">
				<div class="mb-4">
					<h2>Conference details</h2>
				</div>
				<div class="card mb-6">
					<div class="card-body">
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label: "Conference",
								Name:  "work.conference.name",
							},
							Value: rec.Conference.Name,
						})
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label: "Conference location",
								Name:  "work.conference.location",
							},
							Value: rec.Conference.Location,
						})
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label: "Conference organizer",
								Name:  "work.conference.organizer",
							},
							Value: rec.Conference.Organizer,
						})
					</div>
				</div>
			</div>
		}
		if rec.Profile.Identifiers != nil {
			<div class="mb-6" id="work-identifiers">
				<div class="mb-4">
					<h2>Identifiers</h2>
				</div>
				<div class="card mb-6">
					<div class="card-body">
						@forms.CodeRepeat(forms.CodeRepeatArgs{
							FieldArgs: forms.FieldArgs{
								Name:     "work.identifiers",
								Required: rec.Profile.Identifiers.Required,
							},
							Attrs:     rec.Identifiers,
							Schemes:   rec.Profile.IdentifierSchemes,
							AddURL:    urls.BackofficeWorkAddIdentifier(),
							RemoveURL: urls.BackofficeWorkRemoveIdentifier(),
						})
					</div>
				</div>
			</div>
		}
	</div>
}

type textsFieldArgs struct {
	Texts       []bbl.Text
	Name        string
	Label       string
	PluralLabel string
	Title       string
	PluralTitle string
	AddURL      string
	EditURL     string
	RemoveURL   string
}

templ textsField(c views.Ctx, args textsFieldArgs) {
	<div id={ fmt.Sprintf("work-%s-add", args.Name) } class="modal fade" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h2 class="modal-title">{ c.Loc.Get("Add %s", args.Label) }</h2>
				</div>
				<div class="modal-body">
					@forms.TextArea(forms.TextAreaArgs{
						FieldArgs: forms.FieldArgs{
							Name:  "val",
							Label: args.Title,
						},
						Rows: 8,
					})
					@forms.Select(forms.SelectArgs{
						FieldArgs: forms.FieldArgs{
							Name:  "lang",
							Label: "Language",
						},
						Options: forms.LanguageOptions,
					})
				</div>
				<div class="modal-footer">
					<button class="btn btn-link" type="button" data-bs-dismiss="modal">{ c.Loc.Get("Cancel") }</button>
					<button
						class="btn btn-primary"
						type="button"
						data-bs-dismiss="modal"
						hx-include="#work-form [name*='work.'], closest .modal"
						hx-post={ args.AddURL }
						hx-vals={ fmt.Sprintf(`{"idx": %d}`, len(args.Texts)) }
					>
						<span class="btn-text">{ c.Loc.Get("Add %s", args.Label) }</span>
						<i class="if if-arrow-right"></i>
					</button>
				</div>
			</div>
		</div>
	</div>
	<div class="form-group">
		<div class="bc-toolbar h-auto">
			<div class="bc-toolbar-left">
				<label class="form-label form-label-top">{ args.PluralTitle }</label>
			</div>
			<div class="bc-toolbar-right">
				<button
					class="btn btn-tertiary"
					type="button"
					data-bs-toggle="modal"
					data-bs-target={ fmt.Sprintf("#work-%s-add", args.Name) }
				>
					<i class="if if-add"></i>
					<div class="btn-text">{ c.Loc.Get("Add %s", args.Label) }</div>
				</button>
			</div>
		</div>
		if len(args.Texts) == 0 {
			<div class="card shadow-none mb-6 bg-lightest">
				<div class="card-body">
					<div class="c-blank-slate py-4">
						<p>{ c.Loc.Get("No %s.", args.Label) }</p>
					</div>
				</div>
			</div>
		} else {
			for i, text := range args.Texts {
				<div id={ fmt.Sprintf("work-%s-edit-%d", args.Name, i) } class="modal fade" tabindex="-1">
					<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
						<div class="modal-content">
							<div class="modal-header">
								<h2 class="modal-title">{ c.Loc.Get("Edit %s", args.Label) }</h2>
							</div>
							<div class="modal-body">
								@forms.TextArea(forms.TextAreaArgs{
									FieldArgs: forms.FieldArgs{
										Name:  "val",
										Label: args.Title,
									},
									Value: text.Val,
									Rows:  8,
								})
								@forms.Select(forms.SelectArgs{
									FieldArgs: forms.FieldArgs{
										Name:  "lang",
										Label: "Language",
									},
									Value:   text.Lang,
									Options: forms.LanguageOptions,
								})
							</div>
							<div class="modal-footer">
								<button class="btn btn-link" type="button" data-bs-dismiss="modal">{ c.Loc.Get("Cancel") }</button>
								<button
									class="btn btn-primary"
									type="button"
									data-bs-dismiss="modal"
									hx-include="#work-form [name*='work.'], closest .modal"
									hx-post={ args.EditURL }
									hx-vals={ fmt.Sprintf(`{"idx": %d}`, i) }
								>
									<span class="btn-text">{ c.Loc.Get("Edit %s", args.Label) }</span>
									<i class="if if-arrow-right"></i>
								</button>
							</div>
						</div>
					</div>
				</div>
				<div class="card shadow-none mb-6 bg-lightest">
					<div class="card-body">
						<div class="c-button-toolbar">
							<button
								class="btn btn-tertiary btn-lg-only-responsive"
								type="button"
								data-bs-toggle="modal"
								data-bs-target={ fmt.Sprintf("#work-%s-edit-%d", args.Name, i) }
							>
								<i class="if if-edit"></i>
								<span class="btn-text">{ c.Loc.Get("Edit") }</span>
							</button>
							<button
								class="btn btn-tertiary btn-lg-only-responsive"
								type="button"
								hx-post={ args.RemoveURL }
								hx-vals={ fmt.Sprintf(`{"idx": %d}`, i) }
							>
								<i class="if if-delete"></i>
								<span class="btn-text">{ c.Loc.Get("Remove") }</span>
							</button>
						</div>
						<p class="c-body-small text-muted mb-1">{ text.Lang }</p>
						<p>{ text.Val }</p>
					</div>
				</div>
			}
		}
	</div>
}

templ contributorsField(c views.Ctx, rec *bbl.Work) {
	<div id="work-contributors-add" class="modal" tabindex="-1" role="dialog" aria-modal="true">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h2 class="modal-title">Add contributor</h2>
				</div>
				<div class="p-6 border-bottom">
					<h3>Search contributor</h3>
					<div class="row">
						<div
							class="form-group col"
							hx-disinherit="*"
						>
							<label class="col-form-label">Name</label>
							<input
								class="form-control"
								type="search"
								name="q"
								hx-get={ urls.BackofficeWorkSuggestContributor() }
								hx-vals={ fmt.Sprintf(`{"action": "add", "idx": %d}`, len(rec.Contributors)) }
								hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
								hx-target="#work-contributor-suggestions"
								hx-swap="innerHTML"
							/>
						</div>
					</div>
					<div class="row">
						<div class="form-group col">
							<label class="col-form-label">Credit role</label>
							<select class="form-control" name="credit_roles" multiple>
								for _, role := range bbl.CreditRoles {
									<option value={ role }>{ role }</option>
								}
							</select>
						</div>
					</div>
				</div>
				<div id="work-contributor-suggestions" class="modal-body"></div>
				<div class="modal-footer">
					<button class="btn btn-link" data-bs-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div>
	<div class="form-group">
		<div class="bc-toolbar h-auto">
			<div class="bc-toolbar-left">
				<label class="form-label form-label-top">Contributors</label>
			</div>
			<div class="bc-toolbar-right">
				<button
					class="btn btn-tertiary"
					type="button"
					data-bs-toggle="modal"
					data-bs-target="#work-contributors-add"
				>
					<i class="if if-add"></i>
					<div class="btn-text">Add contributor</div>
				</button>
			</div>
		</div>
		<div class="list-group rounded-lg">
			if len(rec.Contributors) == 0 {
				<div class="card shadow-none mb-6 bg-lightest">
					<div class="card-body">
						<div class="c-blank-slate py-4">
							<p>No contributors.</p>
						</div>
					</div>
				</div>
			} else {
				for i, con := range rec.Contributors {
					<div id={ fmt.Sprintf("work-contributors-edit-%d", i) } class="modal" tabindex="-1" role="dialog" aria-modal="true">
						<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h2 class="modal-title">Edit contributor</h2>
								</div>
								<div class="p-6 border-bottom">
									<h3>Search contributor</h3>
									<div class="row">
										<div
											class="form-group col"
											hx-disinherit="*"
										>
											<label class="col-form-label">Name</label>
											<input
												class="form-control"
												type="search"
												name="q"
												hx-get={ urls.BackofficeWorkSuggestContributor() }
												hx-vals={ fmt.Sprintf(`{"action": "edit", "idx": %d}`, i) }
												hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
												hx-target={ fmt.Sprintf("#work-contributor-suggestions-%d", i) }
												hx-swap="innerHTML"
											/>
										</div>
									</div>
									<div class="row">
										<div class="form-group col">
											<label class="col-form-label">Credit role</label>
											<select class="form-control" name="credit_roles" multiple>
												for _, role := range bbl.CreditRoles {
													<option value={ role } selected?={ slices.Contains(con.CreditRoles, role) }>{ role }</option>
												}
											</select>
										</div>
									</div>
								</div>
								<div id={ fmt.Sprintf("work-contributor-suggestions-%d", i) } class="modal-body"></div>
								<div class="modal-footer">
									<button class="btn btn-link" data-bs-dismiss="modal">Cancel</button>
								</div>
							</div>
						</div>
					</div>
					<div class="list-group-item">
						<input type="hidden" name={ fmt.Sprintf("contributors[%d].person_id", i) } value={ con.PersonID }/>
						<div class="bc-avatar-and-text align-items-start">
							<div class="bc-avatar mt-3 bc-avatar--light-blue" data-avatar-item="data-avatar-item">
								<i class="if if-ghent-university"></i>
							</div>
							<div class="bc-avatar-text">
								<div class="hstack-md-responsive gap-3 gap-lg-4">
									<div class="vstack gap-3">
										<h4 class="mb-0">{ con.GetName() }</h4>
										<ul class="c-meta-list c-meta-list-horizontal">
											<li class="c-meta-item">
												<i class="if if-ghent-university if--small if--muted"></i>
												<span class="text-muted">UGent</span>
											</li>
											for _, role := range con.CreditRoles {
												<li class="c-meta-item">
													<span class="text-muted">{ role }</span>
												</li>
											}
										</ul>
									</div>
									<div class="c-button-toolbar">
										<button
											class="btn btn-tertiary btn-lg-only-responsive"
											type="button"
											data-bs-toggle="modal"
											data-bs-target={ fmt.Sprintf("#work-contributors-edit-%d", i) }
										>
											<i class="if if-edit"></i>
											<span
												class="btn-text"
											>Edit</span>
										</button>
										<button
											class="btn btn-tertiary btn-lg-only-responsive"
											type="button"
											hx-post={ urls.BackofficeWorkRemoveContributor() }
											hx-vals={ fmt.Sprintf(`{"idx": %d}`, i) }
										>
											<i class="if if-delete"></i>
											<span class="btn-text">Remove</span>
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			}
		</div>
	</div>
}

templ ContributorSuggestions(c views.Ctx, hits *bbl.RecHits[*bbl.Person], action string, idx int) {
	<ul class="list-group">
		for _, hit := range hits.Hits {
			<li class="list-group-item">
				<div class="list-group-item-inner">
					<div class="list-group-item-main">
						<div class="bc-avatar-and-text align-items-start">
							<div class="bc-avatar mt-3">
								<i class="if if-ghent-university"></i>
							</div>
							<div class="bc-avatar-text">
								<h4>{ hit.Rec.Name }</h4>
							</div>
						</div>
					</div>
					<div class="c-button-toolbar">
						<button
							class="btn btn-primary"
							type="button"
							data-bs-dismiss="modal"
							if action == "add" {
								hx-post={ urls.BackofficeWorkAddContributor() }
							} else {
								hx-post={ urls.BackofficeWorkEditContributor() }
							}
							hx-vals={ fmt.Sprintf(`{"idx": %d, "person_id": "%s"}`, idx, hit.Rec.ID) }
							hx-include="#work-form [name*='work.'], closest .modal"
						>
							<span class="btn-text">
								if action == "add" {
									Add contributor
								} else {
									Edit contributor
								}
							</span>
							<i class="if if-arrow-right"></i>
						</button>
					</div>
				</div>
			</li>
		}
	</ul>
}

templ filesField(c views.Ctx, rec *bbl.Work) {
	<ul class="list-group mb-6">
		for i, f := range rec.Files {
			<li class="list-group-item">
				<div class="bc-avatar-and-text align-items-start w-100">
					<div class="bc-avatar bc-avatar--square mt-3 bc-avatar--muted">
						<i class="if if-file"></i>
					</div>
					<div class="bc-avatar-text">
						<div class="hstack-md-responsive gap-3 gap-lg-4">
							<div class="vstack gap-3">
								<div class="d-flex align-items-stretch">
									<div class="d-flex align-items-center overflow-hidden">
										<i class="if if-download if--small if--success"></i>
										<span class="c-subline text-truncate ps-2">Open access</span>
									</div>
									<span class="border-end mx-3"></span>
									<span class="c-subline">No license (in copyright)</span>
								</div>
								<h4 class="mb-0">{ f.Name }</h4>
								<ul class="c-meta-list c-meta-list-horizontal">
									<li class="c-meta-item">Supplementary Material</li>
									<li class="c-meta-item">{ f.ContentType }</li>
									<li class="c-meta-item">{ fmt.Sprint(f.Size) }</li>
								</ul>
							</div>
							<div class="c-button-toolbar">
								<button class="btn btn-tertiary btn-lg-only-responsive" type="button">
									<i class="if if-eye"></i>
									<span class="btn-text">View</span>
								</button>
								<button class="btn btn-tertiary btn-lg-only-responsive" type="button">
									<i class="if if-edit"></i>
									<span class="btn-text">Edit</span>
								</button>
								<button
									class="btn btn-tertiary btn-lg-only-responsive"
									type="button"
									hx-post={ urls.BackofficeWorkRemoveFile() }
									hx-vals={ fmt.Sprintf(`{"idx": %d}`, i) }
								>
									<i class="if if-delete"></i>
									<span class="btn-text">Remove</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			</li>
		}
	</ul>
	<div
		data-uppy
		data-uppy-presign-url={ urls.BackofficeFileUploadURL() }
		hx-post={ urls.BackofficeWorkAddFiles() }
		hx-include="#work-form [name*='work.'], [data-uppy] [name='files']"
		hx-trigger="files-added"
	>
		<div data-uppy-drag-drop></div>
		<div data-uppy-status></div>
	</div>
}
