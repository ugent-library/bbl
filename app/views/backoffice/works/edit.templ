package works

import (
	"fmt"
	"github.com/ugent-library/bbl"
	"github.com/ugent-library/bbl/app/urls"
	"github.com/ugent-library/bbl/app/views"
	"github.com/ugent-library/bbl/app/views/backoffice"
	"github.com/ugent-library/bbl/app/views/forms"
)

templ Edit(c views.Ctx, rec *bbl.Work, state string) {
	@backoffice.Page(c, "Edit") {
		<div class="w-100 h-100 d-flex flex-column overflow-hidden">
			<div class="bc-navbar bc-navbar--white bc-navbar--auto bc-navbar--bordered-bottom flex-column align-items-start">
				<div class="bc-toolbar bc-toolbar-sm-responsive w-100">
					<div class="bc-toolbar-left mb-1">
						<div class="d-inline-flex align-items-center flex-wrap">
							<span>
								// @SummaryStatus(c, rec)
							</span>
							<span class="c-subline text-nowrap me-3 pe-3 border-end">
								// @SummaryKind(c, rec)
							</span>
						</div>
					</div>
					<div class="bc-toolbar-right mb-3 mb-lg-0">
						<div class="bc-toolbar-item ps-0 ps-lg-4">
							@FormButtons(c, rec)
						</div>
					</div>
				</div>
				<h4 class="w-100 c-body-small mb-4" id="work-summary-cite">
					@SummaryCite(c, rec)
				</h4>
				<div class="bc-toolbar flex-column flex-md-row align-items-start pb-4 h-auto">
					<div class="bc-toolbar-left mt-3 mt-md-0" id="work-summary-id">
						@SummaryID(c, rec)
					</div>
				</div>
			</div>
			<div class="d-flex flex-grow-1 flex-shrink-1 overflow-hidden position-relative">
				<div class="c-sub-sidebar c-sub-sidebar--responsive h-100 u-z-reset d-none d-lg-block">
					<div class="bc-navbar bc-navbar--large">
						<div class="bc-toolbar">
							<div class="bc-toolbar-left">
								<div class="bc-toolbar-item">
									<h4 class="bc-toolbar-title">Sidebar</h4>
								</div>
							</div>
						</div>
					</div>
					<div class="c-sub-sidebar__content pt-5">
						<div class="ps-6">
							@FormNav(c, rec)
						</div>
					</div>
				</div>
				<div class="w-100 u-scroll-wrapper">
					<div class="u-scroll-wrapper__body u-smooth-scroll p-6" data-bs-spy="scroll" data-bs-target="#work-form-nav" data-bs-offset="160" data-scroll-area>
						@Form(c, rec, state)
					</div>
				</div>
				if rec.ID != "" {
					<div id="work-messages"></div>
					<div id="work-changes"></div>
					<div id="work-info"></div>
					<div class="c-sub-sidebar c-sub-sidebar--small bg-light">
						<div class="c-sub-sidebar__content">
							<div class="d-flex justify-content-center py-3">
								<nav class="nav nav-sidebar flex-column">
									<button class="nav-link my-2" type="button">
										<i class="if if-message"></i>
									</button>
									<button
										class="nav-link my-2"
										type="button"
										hx-get={ urls.BackofficeWorkChanges(rec.ID) }
										hx-trigger="click once"
										hx-target="#work-changes"
									>
										<i class="if if-time"></i>
									</button>
									<button class="nav-link my-2" type="button">
										<i class="if if-info-circle"></i>
									</button>
								</nav>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	}
}

templ RefreshForm(c views.Ctx, rec *bbl.Work, state string) {
	<div hx-swap-oob="innerHTML:#work-summary-cite">
		@SummaryCite(c, rec)
	</div>
	<div hx-swap-oob="outerHTML:#work-form-buttons">
		@FormButtons(c, rec)
	</div>
	<div hx-swap-oob="outerHTML:#work-form-nav">
		@FormNav(c, rec)
	</div>
	@Form(c, rec, state)
}

templ FormButtons(c views.Ctx, rec *bbl.Work) {
	<div class="c-button-toolbar" id="work-form-buttons">
		<button
			class="btn btn-outline-secondary"
			hx-post={ urls.BackofficeWork(rec.ID) }
			hx-include="[name*='work.']"
		>Save</button>
		<a class="btn btn-success" href="#">Publish to Biblio</a>
		<div class="dropdown">
			<button class="btn btn-outline-secondary btn-icon-only me-0" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
				<i class="if if-more"></i>
				<div class="visually-hidden">More options</div>
			</button>
			<div class="dropdown-menu" style="">
				<button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#delete">
					<i class="if if-delete"></i>
					<span>Delete</span>
				</button>
			</div>
		</div>
	</div>
}

templ FormNav(c views.Ctx, rec *bbl.Work) {
	<nav class="nav nav-pills flex-column" id="work-form-nav">
		<a class="nav-link" href="#work-type">
			<span class="c-sidebar__label">Type</span>
		</a>
		<a class="nav-link" href="#work-files-info">
			<span class="c-sidebar__label">Full text &amp; info</span>
		</a>
		<a class="nav-link" href="#work-description">
			<span class="c-sidebar__label">Description</span>
		</a>
		<a class="nav-link" href="#work-contributors-affiliations">
			<span class="c-sidebar__label">People & affiliations</span>
		</a>
		<a class="nav-link" href="#work-bibliographic-information">
			<span class="c-sidebar__label">Bibliographic information</span>
		</a>
		<a class="nav-link" href="#work-conference-details">
			<span class="c-sidebar__label">Conference details</span>
		</a>
		<a class="nav-link" href="#work-identifiers">
			<span class="c-sidebar__label">Identifiers</span>
		</a>
	</nav>
}

templ Form(c views.Ctx, rec *bbl.Work, state string) {
	<div id="work-form">
		<input type="hidden" name="work.state" value={ state }/>
		<div class="mb-6" id="work-type">
			<div class="mb-4">
				<h2>Type</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					<div class="row">
						<div class="col-lg-6">
							<div class="form-group mb-6 mb-lg-0">
								<label class="form-label form-label-top">Publication type</label>
								<select
									class="form-select w-100"
									name="kind"
									hx-post={ urls.BackofficeWorkChangeKind() }
									hx-include="[name*='work.']"
								>
									for _, kind := range bbl.WorkKinds {
										<option value={ kind } selected?={ kind == rec.Kind }>{ kind }</option>
									}
								</select>
							</div>
						</div>
						if subKinds, ok := bbl.WorkSubkinds[rec.Kind]; ok {
							<div class="col-lg-6">
								<div class="form-group">
									<label class="form-label form-label-top">{ rec.Kind } type</label>
									<select
										class="form-select w-100"
										name="subkind"
										hx-post={ urls.BackofficeWorkChangeKind() }
										hx-include="[name*='work.']"
									>
										<option></option>
										for _, kind := range subKinds {
											<option value={ kind } selected?={ kind == rec.Subkind }>{ kind }</option>
										}
									</select>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-files-info">
			<div class="mb-4">
				<h2>Full text &amp; info</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					@filesField(c, rec)
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-description">
			<div class="mb-4">
				<h2>Description</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					if rec.Profile.Titles != nil {
						@forms.TextRepeat(forms.TextRepeatArgs{
							FieldArgs: forms.FieldArgs{
								Name:     "work.titles",
								Label:    "Title",
								Required: rec.Profile.Titles.Required,
							},
							Attrs: rec.Titles,
						})
					}
					if rec.Profile.Abstracts != nil {
						@forms.LargeTextRepeat(forms.LargeTextRepeatArgs{
							FieldArgs: forms.FieldArgs{
								Name:     "work.abstracts",
								Label:    c.Loc.Get("abstracts"),
								Required: rec.Profile.Abstracts.Required,
							},
							Attrs: rec.Abstracts,
							Rows:  3,
						})
					}
					if rec.Profile.LaySummaries != nil {
						@forms.LargeTextRepeat(forms.LargeTextRepeatArgs{
							FieldArgs: forms.FieldArgs{
								Name:     "work.lay_summaries",
								Label:    c.Loc.Get("lay summaries"),
								Required: rec.Profile.LaySummaries.Required,
							},
							Attrs: rec.LaySummaries,
							Rows:  3,
						})
					}
					if rec.Profile.Keywords != nil {
						@forms.Tags(forms.TagsArgs{
							FieldArgs: forms.FieldArgs{
								Name:  "work.keywords",
								Label: "Keywords",
							},
							Values: rec.Keywords,
						})
					}
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-contributors-affiliations">
			<div class="mb-4">
				<h2>People & affiliations</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					if rec.Profile.Contributors != nil {
						@contributorsField(c, rec)
					}
				</div>
			</div>
		</div>
		<div class="mb-6" id="work-bibliographic-information">
			<div class="mb-4">
				<h2>Bibliographic information</h2>
			</div>
			<div class="card mb-6">
				<div class="card-body">
					if rec.Profile.PublicationYear != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Publication year",
								Name:     "work.publication_year",
								Required: rec.Profile.PublicationYear.Required,
								Cols:     1,
							},
							Value: rec.PublicationYear,
						})
					}
					if rec.Profile.Publisher != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Publisher",
								Name:     "work.publisher",
								Required: rec.Profile.Publisher.Required,
							},
							Value: rec.Publisher,
						})
					}
					if rec.Profile.PlaceOfPublication != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Place of publication",
								Name:     "work.place_of_publication",
								Required: rec.Profile.PlaceOfPublication.Required,
							},
							Value: rec.PlaceOfPublication,
						})
					}
					if rec.Profile.JournalTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Journal title",
								Name:     "work.journal_title",
								Required: rec.Profile.JournalTitle.Required,
							},
							Value: rec.JournalTitle,
						})
					}
					if rec.Profile.JournalAbbreviation != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Short journal title",
								Name:     "work.journal_abbreviation",
								Required: rec.Profile.JournalAbbreviation.Required,
							},
							Value: rec.JournalAbbreviation,
						})
					}
					if rec.Profile.BookTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Book title",
								Name:     "work.book_title",
								Required: rec.Profile.BookTitle.Required,
							},
							Value: rec.BookTitle,
						})
					}
					if rec.Profile.SeriesTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Series title",
								Name:     "work.series_title",
								Required: rec.Profile.SeriesTitle.Required,
							},
							Value: rec.SeriesTitle,
						})
					}
					if rec.Profile.Volume != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Volume",
								Name:     "work.volume",
								Required: rec.Profile.Volume.Required,
								Cols:     1,
							},
							Value: rec.Volume,
						})
					}
					if rec.Profile.Issue != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Issue",
								Name:     "work.issue",
								Required: rec.Profile.Issue.Required,
								Cols:     1,
							},
							Value: rec.Issue,
						})
					}
					if rec.Profile.IssueTitle != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Special issue title",
								Name:     "work.issue_title",
								Required: rec.Profile.IssueTitle.Required,
							},
							Value: rec.IssueTitle,
						})
					}
					if rec.Profile.Edition != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Edition",
								Name:     "work.edition",
								Required: rec.Profile.Edition.Required,
								Cols:     1,
							},
							Value: rec.Edition,
						})
					}
					if rec.Profile.Pages != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "First page",
								Name:     "work.pages.start",
								Required: rec.Profile.Pages.Required,
								Cols:     1,
							},
							Value: rec.Pages.Start,
						})
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Last page",
								Name:     "work.pages.end",
								Required: rec.Profile.Pages.Required,
								Cols:     1,
							},
							Value: rec.Pages.End,
						})
					}
					if rec.Profile.TotalPages != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Number of pages",
								Name:     "work.total_pages",
								Required: rec.Profile.TotalPages.Required,
								Cols:     1,
							},
							Value: rec.TotalPages,
						})
					}
					if rec.Profile.ArticleNumber != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Article number",
								Name:     "work.article_number",
								Required: rec.Profile.ArticleNumber.Required,
								Cols:     1,
							},
							Value: rec.ArticleNumber,
						})
					}
					if rec.Profile.ReportNumber != nil {
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label:    "Report number",
								Name:     "work.report_number",
								Required: rec.Profile.ReportNumber.Required,
								Cols:     1,
							},
							Value: rec.ReportNumber,
						})
					}
				</div>
			</div>
		</div>
		if rec.Profile.Conference != nil {
			<div class="mb-6" id="work-conference-details">
				<div class="mb-4">
					<h2>Conference details</h2>
				</div>
				<div class="card mb-6">
					<div class="card-body">
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label: "Conference",
								Name:  "work.conference.name",
							},
							Value: rec.Conference.Name,
						})
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label: "Conference location",
								Name:  "work.conference.location",
							},
							Value: rec.Conference.Location,
						})
						@forms.TextInput(forms.TextInputArgs{
							FieldArgs: forms.FieldArgs{
								Label: "Conference organizer",
								Name:  "work.conference.organizer",
							},
							Value: rec.Conference.Organizer,
						})
					</div>
				</div>
			</div>
		}
		if rec.Profile.Identifiers != nil {
			<div class="mb-6" id="work-identifiers">
				<div class="mb-4">
					<h2>Identifiers</h2>
				</div>
				<div class="card mb-6">
					<div class="card-body">
						@forms.CodeRepeat(forms.CodeRepeatArgs{
							FieldArgs: forms.FieldArgs{
								Name:     "work.identifiers",
								Required: rec.Profile.Identifiers.Required,
							},
							Attrs:   rec.Identifiers,
							Schemes: rec.Profile.IdentifierSchemes,
						})
					</div>
				</div>
			</div>
		}
	</div>
}

templ contributorsField(c views.Ctx, rec *bbl.Work) {
	<div class="form-group">
		<div class="bc-toolbar h-auto">
			<div class="bc-toolbar-left">
				<h3>Contributors</h3>
			</div>
			<div class="bc-toolbar-right">
				<button class="btn btn-tertiary" type="button" data-bs-toggle="modal" data-bs-target="#work-contributors-add">
					<i class="if if-add"></i>
					<div class="btn-text">Add contributors</div>
				</button>
			</div>
		</div>
		<div id="work-contributors">
				@contributors(c, rec.Contributors)
		</div>
		<div class="modal" id="work-contributors-add" tabindex="-1" role="dialog" aria-modal="true">
			<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<div class="bc-toolbar">
							<div class="bc-toolbar-left">
								<div class="bc-toolbar-item">
									<div class="mt-5">
										<h2 class="modal-title">Contributors</h2>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-body">
						<div class="row">
							<div class="col-6 border-end">
								<div id="modal-work-contributors">
										@modalContributors(c, rec.Contributors)
								</div>
							</div>
							<div class="col-6">
								<div class="p-6 border-bottom">
									<div class="form-group col-6">
										<label class="col-form-label">Search researcher</label>
										<input
											class="form-control"
											type="search"
											name="q"
											autocomplete="off"
											hx-get={ urls.BackofficeWorkSuggestContributors() }
											hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
											hx-target="#work-contributor-suggestions"
										/>
										<span class="form-text text-muted" for="search-researcher">Enter name, ORCID or UGent ID.</span>
									</div>
								</div>
								<div id="work-contributor-suggestions">
									<div class="c-blank-slate c-blank-slate-muted c-blank-slate-large">
										<div class="bc-avatar bc-avatar--small">
											<i class="if if-info-circle"></i>
										</div>
										<p>Type a first and last name above to add a contributor.</p>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="modal-footer">
						<div class="bc-toolbar h-auto">
							<div class="bc-toolbar-right flex-wrap">
								<div class="bc-toolbar-item">
									<button class="btn btn-primary" data-bs-dismiss="modal">
										<i class="if if-check"></i>
										<span class="button-text">Done</span>
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ contributors(c views.Ctx, cons []bbl.WorkContributor) {
	if len(cons) > 0 {
		<ul class="list-group rounded-lg" id="work-contributors">
			for i, con := range cons {
				@contributor(c, con, i)
			}
		</ul>
	} else {
		<div class="card shadow-none bg-lightest">
			<div class="card-body">
				<div class="c-blank-slate py-4">
					<p>No contributors.</p>
				</div>
			</div>
		</div>
	}
}

templ contributor(c views.Ctx, con bbl.WorkContributor, idx int) {
	<li class="list-group-item">
		<input type="hidden" name="work.contributors" value={ templ.JSONString(con) }/>
		<div class="bc-avatar-and-text align-items-start">
			<div class="bc-avatar mt-3 bc-avatar--light-blue" data-avatar-item="data-avatar-item">
				<i class="if if-ghent-university"></i>
			</div>
			<div class="bc-avatar-text">
				<div class="hstack-md-responsive gap-3 gap-lg-4">
					<div class="vstack gap-3">
						<h4 class="mb-0">{ con.GetName() }</h4>
						<ul class="c-meta-list c-meta-list-horizontal">
							<li class="c-meta-item">
								<i class="if if-ghent-university if--small if--muted"></i>
								<span class="text-muted">UGent</span>
							</li>
							for _, role := range con.CreditRoles {
								<li class="c-meta-item">
									<span class="text-muted">{ role }</span>
								</li>
							}
						</ul>
					</div>
					<div class="c-button-toolbar">
						<button
							class="btn btn-tertiary btn-lg-only-responsive"
							type="button"
							hx-post={ urls.BackofficeWorkRemoveContributor() }
							hx-swap="none"
							hx-vals={ fmt.Sprintf(`{"idx": %d}`, idx) }
							hx-include="[name='work.contributors']"
						>
							<i class="if if-delete"></i>
							<span class="btn-text">Remove</span>
						</button>
					</div>
				</div>
			</div>
		</div>
	</li>
}

templ modalContributors(c views.Ctx, cons []bbl.WorkContributor) {
	if len(cons) > 0 {
		<ul class="list-group" id="modal-work-contributors">
			for i, con := range cons {
				@modalContributor(c, con, i)
			}
		</ul>
	} else {
		<div class="card shadow-none bg-lightest">
			<div class="card-body">
				<div class="c-blank-slate py-4">
					<p>No contributors.</p>
				</div>
			</div>
		</div>
	}
}

templ modalContributor(c views.Ctx, con bbl.WorkContributor, idx int) {
	<li class="list-group-item" data-work-contributor={ idx }>
		<div class="bc-avatar-and-text align-items-start">
			<div class="bc-avatar mt-3 bc-avatar--light-blue" data-avatar-item="data-avatar-item">
				<i class="if if-ghent-university"></i>
			</div>
			<div class="bc-avatar-text">
				<div class="hstack-md-responsive gap-3 gap-lg-4">
					<div class="vstack gap-3">
						<h4 class="mb-0">{ con.GetName() }</h4>
						<ul class="c-meta-list c-meta-list-horizontal">
							<li class="c-meta-item">
								<i class="if if-ghent-university if--small if--muted"></i>
								<span class="text-muted">UGent</span>
							</li>
							for _, role := range con.CreditRoles {
								<li class="c-meta-item">
									<span class="text-muted">{ role }</span>
								</li>
							}
						</ul>
					</div>
					<div class="c-button-toolbar">
						<button
							class="btn btn-tertiary btn-lg-only-responsive"
							type="button"
							hx-post={ urls.BackofficeWorkRemoveContributor() }
							hx-swap="none"
							hx-vals={ fmt.Sprintf(`{"idx": %d}`, idx) }
							hx-include="[name='work.contributors']"
						>
							<i class="if if-delete"></i>
							<span class="btn-text">Remove</span>
						</button>
					</div>
				</div>
			</div>
		</div>
	</li>
}

templ ContributorSuggestions(c views.Ctx, hits *bbl.RecHits[*bbl.Person]) {
	<ul class="list-group">
		for _, hit := range hits.Hits {
			<li class="list-group-item">
				<div class="list-group-item-inner">
					<div class="list-group-item-main">
						<div class="bc-avatar-and-text align-items-start">
							<div class="bc-avatar mt-3">
								<i class="if if-ghent-university"></i>
							</div>
							<div class="bc-avatar-text">
								<h4>{ hit.Rec.Name }</h4>
							</div>
						</div>
					</div>
					<div class="c-button-toolbar">
						<button
							class="btn btn-primary"
							type="button"
							hx-post={ urls.BackofficeWorkAddContributor() }
							hx-swap="none"
							hx-vals={ fmt.Sprintf(`js:{person_id: "%s", idx: document.querySelectorAll("[name='work.contributors']").length}`, hit.Rec.ID) }
							hx-include="[name='work.contributors']"
						>
							Select
							<i class="if if-arrow-right"></i>
						</button>
					</div>
				</div>
			</li>
		}
	</ul>
}

templ RefreshContributors(c views.Ctx, cons []bbl.WorkContributor) {
	<div hx-swap-oob="innerHTML:#work-contributors">
			@contributors(c, cons)
	</div>
	<div hx-swap-oob="innerHTML:#modal-work-contributors">
			@modalContributors(c, cons)
	</div>
}

templ filesField(c views.Ctx, rec *bbl.Work) {
	<ul class="list-group mb-6">
		for i, f := range rec.Files {
			<li class="list-group-item">
				<div class="bc-avatar-and-text align-items-start w-100">
					<div class="bc-avatar bc-avatar--square mt-3 bc-avatar--muted">
						<i class="if if-file"></i>
					</div>
					<div class="bc-avatar-text">
						<div class="hstack-md-responsive gap-3 gap-lg-4">
							<div class="vstack gap-3">
								<div class="d-flex align-items-stretch">
									<div class="d-flex align-items-center overflow-hidden">
										<i class="if if-download if--small if--success"></i>
										<span class="c-subline text-truncate ps-2">Open access</span>
									</div>
									<span class="border-end mx-3"></span>
									<span class="c-subline">No license (in copyright)</span>
								</div>
								<h4 class="mb-0">{ f.Name }</h4>
								<ul class="c-meta-list c-meta-list-horizontal">
									<li class="c-meta-item">Supplementary Material</li>
									<li class="c-meta-item">{ f.ContentType }</li>
									<li class="c-meta-item">{ f.Size }</li>
								</ul>
							</div>
							<div class="c-button-toolbar">
								<button class="btn btn-tertiary btn-lg-only-responsive" type="button">
									<i class="if if-eye"></i>
									<span class="btn-text">View</span>
								</button>
								<button class="btn btn-tertiary btn-lg-only-responsive" type="button">
									<i class="if if-edit"></i>
									<span class="btn-text">Edit</span>
								</button>
								<button
									class="btn btn-tertiary btn-lg-only-responsive"
									type="button"
									hx-post={ urls.BackofficeWorkRemoveFile() }
									hx-vals={ fmt.Sprintf(`{"idx": %d}`, i) }
								>
									<i class="if if-delete"></i>
									<span class="btn-text">Remove</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			</li>
		}
	</ul>
	<div
		data-uppy
		data-uppy-presign-url={ urls.BackofficeFileUploadURL() }
		hx-post={ urls.BackofficeWorkAddFiles() }
		hx-include="[name*='work.'], [data-uppy] [name='files']"
		hx-trigger="files-added"
	>
		<div data-uppy-drag-drop></div>
		<div data-uppy-status></div>
	</div>
}
