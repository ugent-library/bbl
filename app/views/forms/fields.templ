package forms

import (
	"fmt"
	"strings"
)

type Theme int

const (
	ThemeVertical Theme = iota
)

templ Errors(errors []string) {
	if len(errors) > 0 {
		<div class="alert alert-danger">
			<ul class="ps-3">
				for _, err := range errors {
					<li>{ err }</li>
				}
			</ul>
		</div>
	}
}

type FieldArgs struct {
	Label     string
	Name      string
	Form      string
	Readonly  bool
	Tooltip   string
	Required  bool
	Error     string
	Cols      int
	Help      string
	HelpHTML  string
	Theme     Theme
	AutoFocus bool
}

func (args FieldArgs) ID() string {
	return strings.Map(func(r rune) rune {
		if r == '.' || r == '[' || r == ']' {
			return '-'
		}
		return r
	}, args.Name)
}

func (args FieldArgs) NameFor(parts ...any) string {
	name := args.Name
	for _, p := range parts {
		switch pt := p.(type) {
		case int:
			name += fmt.Sprintf("[%d]", pt)
		case string:
			if name != "" {
				name += "."
			}
			name += pt
		}
	}
	return name
}

func (args FieldArgs) IDFor(parts ...any) string {
	id := args.ID()
	for _, p := range parts {
		if id != "" {
			id += "-"
		}
		switch pt := p.(type) {
		case int:
			id += fmt.Sprint(pt)
		case string:
			id += pt
		}
	}
	return id
}

templ Field(args FieldArgs, labelFor string) {
	switch args.Theme {
		case ThemeVertical:
			@verticalField(args, labelFor) {
				{ children... }
			}
	}
}

type TextInputArgs struct {
	FieldArgs
	Value string
}

templ TextInput(args TextInputArgs) {
	@Field(args.FieldArgs, args.Name) {
	<input
		class={ "form-control", templ.KV("is-invalid", args.Error != "") }
		name={ args.Name }
		if args.Form !="" {
			form={ args.Form }
		}
		id={ args.ID() }
		type="text"
		value={ args.Value }
		readonly?={ args.Readonly }
		autofocus?={ args.AutoFocus }
		{ fieldAria(args.FieldArgs)... }
	/>
	}
}

type TextAreaArgs struct {
	FieldArgs
	Value string
	Rows  int
}

templ TextArea(args TextAreaArgs) {
	@Field(args.FieldArgs, args.Name) {
	<textarea
		class={ "form-control", templ.KV("is-invalid", args.Error != "") }
		id={ args.ID() }
		name={ args.Name }
		if args.Form != "" {
			form={ args.Form }
		}
		readonly?={ args.Readonly }
		rows={ args.Rows }
		autofocus?={ args.AutoFocus }
		{ fieldAria(args.FieldArgs)... }
	>{ args.Value }</textarea>
	}
}

type SelectArgs struct {
	FieldArgs
	Value       string
	EmptyOption bool
	Options     []Option
}

func (args SelectArgs) WithNameFor(parts ...any) SelectArgs {
	args.Name = args.NameFor(parts...)
	return args
}

templ Select(args SelectArgs) {
	@Field(args.FieldArgs, args.Name) {
		<select
			class={ "form-control", "form-select", templ.KV("is-invalid", args.Error != "") }
			id={ args.ID() }
			name={ args.Name }
			if args.Form != "" {
				form={ args.Form }
			}
			autofocus?={ args.AutoFocus }
			{ fieldAria(args.FieldArgs)... }
		>
			if args.EmptyOption {
				<option></option>
			}
			for _, o := range args.Options {
				<option value={ o.Value } selected?={ o.Value == args.Value }>{ o.Label }</option>
			}
		</select>
	}
}

type Option struct {
	Label string
	Value string
}

type CheckboxArgs struct {
	FieldArgs
	Value   string
	Checked bool
}

templ Checkbox(args CheckboxArgs) {
	<div class={ "mb-6", "row", templ.KV("is-invalid", args.Error != "") }>
		<div class={ fmt.Sprintf("col-%d", args.Cols), "offset-lg-3", "mt-2" }>
			<div class="form-check">
				<input
					class={ "form-check-input", templ.KV("is-invalid", args.Error != "") }
					id={ args.ID() }
					name={ args.Name }
					if args.Form != "" {
						form={ args.Form }
					}
					value={ args.Value }
					type="checkbox"
					checked?={ args.Checked }
					{ fieldAria(args.FieldArgs)... }
				/>
				<label class="form-check-label" for={ args.Name }>{ args.Label }</label>
				@fieldError(args.FieldArgs)
				@fieldHelp(args.FieldArgs)
			</div>
		</div>
	</div>
}

type RadioGroupArgs struct {
	FieldArgs
	Value   string
	Options []Option
}

templ RadioGroup(args RadioGroupArgs) {
	<div class={ "mb-6", "row", templ.KV("is-invalid", args.Error != "") }>
		<label class="col-lg-3 col-form-label" for={ args.Name }>
			<div class="w-100">
				{ args.Label }
				if args.Tooltip != "" {
					<a class="text-muted px-2" href="#" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="right" data-bs-content={ args.Tooltip }>
						<i class="if if-info-circle if--small"></i>
						<span class="visually-hidden">More info</span>
					</a>
				}
			</div>
			<div class="w-100">
				if args.Required {
					&nbsp;<span class="badge badge-outline-primary badge-sm ms-0">Required</span>
				}
			</div>
		</label>
		<div class={ fmt.Sprintf("col-lg-%d", args.Cols) }>
			for _, o := range args.Options {
				<label class="form-check form-check-inline active ps-0">
					<input
						class="pe-3"
						type="radio"
						name={ args.Name }
						if args.Form != "" {
							form={ args.Form }
						}
						checked?={ o.Value == args.Value }
						value={ o.Value }
						{ fieldAria(args.FieldArgs)... }
					/>
					<span class="pe-5">{ o.Label }</span>
				</label>
			}
			@fieldError(args.FieldArgs)
			@fieldHelp(args.FieldArgs)
		</div>
	</div>
}

type DateInputArgs struct {
	FieldArgs
	Value string
	Min   string
	Max   string
}

templ DateInput(args DateInputArgs) {
	@Field(args.FieldArgs, args.Name) {
		<input
			class={ "form-control", templ.KV("is-invalid", args.Error != "") }
			id={ args.Name }
			name={ args.Name }
			if args.Form != "" {
				form={ args.Form }
			}
			type="date"
			value={ args.Value }
			if args.Min != "" {
				min={ args.Min }
			}
			if args.Max != "" {
				max={ args.Max }
			}
			{ fieldAria(args.FieldArgs)... }
		/>
	}
}

func helpID(args FieldArgs) string {
	return fmt.Sprintf("%s-help", args.ID())
}

templ fieldTooltip(args FieldArgs) {
	if args.Tooltip != "" {
		<a class="text-muted px-2" href="#" data-bs-container="body" data-bs-toggle="popover" data-bs-placement="right" data-bs-content={ args.Tooltip }>
			<i class="if if-info-circle if--small"></i>
			<span class="visually-hidden">More info</span>
		</a>
	}
}

// templ fieldRequired(args FieldArgs) {
// 	if args.Required {
// 		<span class="required" aria-hidden="true" title="required">*</span>
// 	}
// }

templ fieldRequiredBadge(args FieldArgs) {
	if args.Required {
		<span class="badge badge-outline-primary badge-sm">Required</span>
	}
}

templ fieldError(args FieldArgs) {
	if args.Error != "" {
		<small class="invalid-feedback">{ args.Error }</small>
	}
}

templ fieldHelp(args FieldArgs) {
	if args.Help != "" {
		<small id={ helpID(args) } class="form-text">
			@templ.Raw(args.Help)
		</small>
	}
}

func fieldAria(args FieldArgs) templ.Attributes {
	if args.HelpHTML != "" {
		return templ.Attributes{
			"aria-description": args.Help,
			"aria-details":     helpID(args),
		}
	}
	if args.Help != "" {
		return templ.Attributes{
			"aria-describedby": helpID(args),
		}
	}
	return templ.Attributes{}
}

templ verticalField(args FieldArgs, labelFor string) {
	<div class={ "form-group", templ.KV("is-invalid", args.Error != "") }>
		<label class="form-label form-label-top" for={ labelFor }>
			// @fieldRequired(args)
			@templ.Raw(args.Label)
			@fieldTooltip(args)
			@fieldRequiredBadge(args)
		</label>
		if args.Cols > 0 {
			<div class={ fmt.Sprintf("col-%d", args.Cols) }>
				{ children... }
				@fieldError(args)
				@fieldHelp(args)
			</div>
		} else {
			{ children... }
			@fieldError(args)
			@fieldHelp(args)
		}
	</div>
}
